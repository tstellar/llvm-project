name: "Windows Precommit Tests"

permissions:
  contents: read
  actions: write

on:
  pull_request:
    branches:
      - main

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  compute-projects:
    name: "Compute Projects to Test"
    runs-on: ubuntu-22.04
    outputs:
      projects: ${{ steps.vars.outputs.projects }}
      check-targets: ${{ steps.vars.outputs.check-targets }}
      test-build: ${{ steps.vars.outputs.check-targets != '' }}
    steps:
      - name: Fetch LLVM sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Compute projects to test
        id: vars
        uses: ./.github/workflows/compute-projects-to-test

  build-windows-part1:
    name: "Build"
    runs-on: windows-2022
    outputs:
      job-id: ${{ steps.vars.outputs.job-id }}
      build-timeout: ${{ steps.build.outputs.timeout }}
      build-failed: ${{ steps.build.outputs.failed }}
    needs:
      - compute-projects
    if: ${{ needs.compute-projects.outputs.test-build == 'true' }}
    steps:
      - name: Collect Job ID
        id: vars
        shell: bash
        run: |
          echo job-id=${{ github.job }} >> $GITHUB_OUTPUT

      - name: Setup Windows
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64

      - name: Fetch LLVM sources
        uses: actions/checkout@v4

      - name: Setup sccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 2G
          variant: sccache
          key: precommit-windows
      
      - name: Restore sccache from previous PR run
        uses: ./.github/workflows/pr-sccache-restore

      - name: Configure
        shell: bash
        run: |
          cmake -B build -GNinja \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="${{ needs.compute-projects.outputs.projects }}" \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_LIT_ARGS="-v --no-progress-bar" \
            -DCMAKE_C_COMPILER_LAUNCHER=sccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -S llvm

      - name: Build
        id: build
        shell: bash
        timeout-minutes: 1
        run: |
          ninja -C build ${{ needs.compute-projects.outputs.check-targets }} || echo "failed=true" >> $GITHUB_OUTPUT
          echo "timeout=false" >> $GITHUB_OUTPUT

      - name: Save sccache for next PR run
        if: always()
        uses: ./.github/workflows/pr-sccache-save

      - name: Package Build Directory
        shell: bash
        if: always() && steps.build.outputs.timeout != 'false'
        run: |
          tar -c . | zstd -T0 -c > ../llvm-project.tar.zst
          mv ../llvm-project.tar.zst .

      - name: Upload Build
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
        if: always() && steps.build.outputs.timeout != 'false'
        with:
          name: part1
          path: llvm-project.tar.zst
          retention-days: 2

  check-part1-result:
    name: "Check Build Result"
    if: always()
    outputs:
      result: ${{ steps.part1-status.outputs.result }}
    needs:
      - compute-projects
      - build-windows-part1
    runs-on: windows-2022
    steps:
      - name: Check Status of Part1 Build
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        id: part1-status
        with:
          script: |
            const data = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: "${{ github.run_id }}"
            });
            console.log(data)
            for (job of data.data.jobs) {
              if (job.name != "build-windows-part1") {
                continue;
              }
              if (job.conclusion == "success") {
                return "success";
              }
          
              if ("${{ needs.build-windows-part1.outputs.build-failed }}" == "true" &&
                  "${{ needs.build-windows-part1.outputs.build-timeout }}" != "false") {
                // Failed due to a timeout
                return "timeout";
              }
            }
            return "failure"

  build-windows:
    name: "Build (Rebuild due to timeout)"
    if: ${{ needs.check-part1-result.outputs.result == 'timeout' }}
    needs:
      - compute-projects
      - build-windows-part1
      - check-part1-result
    runs-on: windows-2022
    steps:
      - name: Setup Windows
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          max-size: 2G
          variant: sccache
          key: precommit-windows
          # The llvm-project.zip archive contains the sccache directory from
          # part 1, so we don't need to restore the cache.
          restore: false

      - name: Download Artifact
        uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
        with:
          pattern: part1
          merge-multiple: true

      - name: Unpack Artifact
        shell: bash
        run: |
          ls
          tar --zstd -xf llvm-project.tar.zst
          rm llvm-project.tar.zst

      - name: Build
        shell: bash
        run: |
          ninja -C build ${{ needs.compute-projects.outputs.check-targets }}

      - name: Save sccache for next PR run
        if: always()
        uses: ./.github/workflows/pr-sccache-save
 
      - name: Package Build Directory
        shell: bash
        run: |
          tar -c . | zstd -T0 -c > ../llvm-project.tar.zst
          mv ../llvm-project.tar.zst .

      - name: Upload Build
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
        with:
          name: part2
          path: llvm-project.tar.zst
          retention-days: 2
