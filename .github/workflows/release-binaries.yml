name: Release Binaries

on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Release Version'
        required: true
        type: string
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean

  workflow_call:
    inputs:
      release-version:
        description: 'Release Version'
        required: true
        type: string
      upload:
        description: 'Upload binaries to the release page'
        required: true
        default: false
        type: boolean
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron:  '0 8 1 * *'

permissions:
  contents: read # Default everything to read-only

jobs:
  prepare:
    name: Prepare to build binaries
    runs-on: ubuntu-22.04
    outputs:
      release-version: ${{ steps.vars.outputs.release-version }}
      ref: ${{ steps.vars.outputs.ref }}
      upload: ${{ steps.vars.outputs.upload }}

    steps:
    - name: Checkout LLVM
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Install Dependencies
      run: |
        pip install --require-hashes -r ./llvm/utils/git/requirements.txt

    - name: Check Permissions
      if: false
      env:
        GITHUB_TOKEN: ${{ github.token }}
        USER_TOKEN: ${{ secrets.RELEASE_TASKS_USER_TOKEN }}
      run: |
        ./llvm/utils/release/./github-upload-release.py --token "$GITHUB_TOKEN" --user ${{ github.actor }} --user-token "$USER_TOKEN" check-permissions

    - name: Collect Variables
      id: vars
      # In order for the test-release.sh script to run correctly, the LLVM
      # source needs to be at the following location relative to the build dir:
      # | X.Y.Z-rcN | ./rcN/llvm-project
      # | X.Y.Z     | ./final/llvm-project
      #
      # We also need to set divergent flags based on the release version:
      # | X.Y.Z-rcN | -rc N -test-asserts
      # | X.Y.Z     | -final
      run: |
        tag="${{ github.ref_name }}"
        trimmed=$(echo ${{ inputs.release-version }} | xargs)
        [[ "$trimmed" != "" ]] && tag="llvmorg-$trimmed"
        if [ "$tag" = "main" ]; then
          # If tag is main, then we've been triggered by a scheduled so pass so
          # use the head commit as the tag.
          tag=`git rev-parse HEAD`
        fi
        if [ -n "${{ inputs.upload }}" ]; then
          upload="${{ inputs.upload }}"
        else
          upload="false"
        fi
        bash .github/workflows/set-release-binary-outputs.sh "$tag" "$upload"

  build-stage1:
    name: "Build Stage 1"
    needs: prepare
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
       runs-on:
         - ubuntu-22.04
         - windows-2022
         - macos-13
         - macos-14
    steps:
    - name: Checkout LLVM
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      with:
        ref: ${{ needs.prepare.outputs.ref }}

    - name: Install Ninja
      uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

    - name: Setup sccache
      uses: hendrikmuhs/ccache-action@ca3acd2731eef11f1572ccb126356c2f9298d35e # v1.2.9
      with:
        # Default to 2G to workaround: https://github.com/hendrikmuhs/ccache-action/issues/174
        max-size: 2G
        key: sccache-${{ runner.os }}-${{ runner.arch }}-release
        variant: sccache

    - name: Build Stage 1 Clang
      id: build
      shell: bash
      run: |
        build_prefix=`pwd`
        #if [ "${{ runner.os }}" = "Linux" ]; then
        #  sudo chown $USER:$USER /mnt/
        #  build_prefix=/mnt/
        #fi
        cmake -G Ninja -C clang/cmake/caches/Release.cmake -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -S llvm -B $build_prefix/build
        ninja -v -C $build_prefix/build
        echo "build-prefix=$build_prefix" >> $GITHUB_OUTPUT

    # We need to create an archive of the build directory, because it has too
    # many files to upload.
    - name: Package Build and Source Directories
      shell: bash
      run: |
        # Dereference symlinks so that this works on Windows.
        tar -h -c . | zstd -T0 -c > ../llvm-project.tar.zst
        mv ../llvm-project.tar.zst .
        tar -C ${{ steps.build.outputs.build-prefix }} -c build/ | zstd -T0 -c > build.tar.zst

    - name: Upload Stage 1 Source
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-stage1-source
        path: llvm-project.tar.zst
        retention-days: 2

    - name: Upload Stage 1 Build Dir
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os}}-${{ runner.arch }}-stage1-build
        path: build.tar.zst
        retention-days: 2

  build-stage2:
    name: "Build Stage 2"
    needs:
      - prepare
      - build-stage1
    if: always()
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
       runs-on:
         - ubuntu-22.04
         - windows-2022
         - macos-13
         - macos-14
    steps:
    - name: Install Ninja
      uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

    - name: Download Stage 1 Artifacts
      uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
      with:
        pattern: ${{ runner.os }}-${{ runner.arch }}-stage1-*
        merge-multiple: true

    - name: Unpack Artifacts
      shell: bash
      id: unpack
      run: |
        build_prefix=`pwd`
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo chown $USER:$USER /mnt/
          build_prefix=/mnt/
        fi
        tar --zstd -xf llvm-project.tar.zst
        rm llvm-project.tar.zst
        tar --zstd -C $build_prefix -xf build.tar.zst
        rm build.tar.zst
        echo "build-prefix=$build_prefix" >> $GITHUB_OUTPUT

    - name: Build Stage 2
      if: false
      shell: bash
      run: |
        ninja -C ${{ steps.unpack.outputs.build-prefix}}/build stage2-instrumented

    # We need to create an archive of the build directory, because it has too
    # many files to upload.
    - name: Save Build and Source Directories
      shell: bash
      run: |
        # Dereference symlinks so that this works on Windows.
        tar -h -c . | zstd -T0 -c > ../llvm-project.tar.zst
        mv ../llvm-project.tar.zst .
        tar -C ${{ steps.unpack.outputs.build-prefix }} -c build/ | zstd -T0 -c > build.tar.zst

    - name: Upload Stage 2 Source
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-stage2-source
        path: ${{ github.workspace }}/llvm-project.tar.zst
        retention-days: 2

    - name: Upload Stage 2 Build Dir
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-stage2-build
        path: ${{ github.workspace }}/build.tar.zst
        retention-days: 2


  build-stage3:
    name: "Build Stage 3"
    needs:
      - prepare
      - build-stage2
    if: always()
    outputs:
      filename: ${{ steps.package-info.outputs.release-filename }}
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
       runs-on:
         - ubuntu-22.04
         - windows-2022
         - macos-13
         - macos-14
    steps:
    - name: Install Ninja
      uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

    - name: 'Download artifact'
      uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
      with:
        pattern: ${{ runner.os }}-${{ runner.arch }}-stage2-*
        merge-multiple: true

    - name: Unpack Artifact
      shell: bash
      id: unpack
      run: |
        build_prefix=`pwd`
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo chown $USER:$USER /mnt/
          build_prefix=/mnt/
        fi
        tar --zstd -xf llvm-project.tar.zst
        rm llvm-project.tar.zst
        tar --zstd -C $build_prefix -xf build.tar.zst
        rm build.tar.zst
        echo "build-prefix=$build_prefix" >> $GITHUB_OUTPUT

    - name: Timeout Restore
      id: timeout
      if: false
      uses: ./.github/workflows/timeout-restore
      with:
        artifact-name-suffix: ${{ runner.os }}-${{ runner.arch }}

    - name: Build Release Package
      shell: bash
      timeout-minutes: 330
      run: |
        ninja -C ${{ steps.unpack.outputs.build-prefix }}/build stage2-package

    - name: Timeout Save
      if: always()
      uses: ./.github/workflows/timeout-save
      with:
        job-name: "Build (${{ matrix.runs-on}})"
        artifact-name-suffix: ${{ matrix.name }}
        timeout-step: "Build Release Package"
        timeout-minutes: 330

    - id: package-info
      shell: bash
      run: |
        filename="LLVM-${{ needs.prepare.outputs.release-version }}-Linux.tar.gz"
        echo "filename=$filename" >> $GITHUB_OUTPUT
        echo "path=${{ steps.unpack.outputs.build-prefix  }}/build/tools/clang/stage2-bins/$filename" >> $GITHUB_OUTPUT

    - uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-release-binary
        path: ${{ steps.package-info.outputs.path }}

    # Clean up some build files to reduce size of artifact.
    - name: Clean Up Build Directory
      shell: bash
      run: |
        find ${{ steps.unpack.outputs.build-prefix }}/build -iname ${{ steps.package-info.outputs.filename }} -delete

    # We need to create an archive of the build directory, because it has too
    # many files to upload.
    - name: Save Build and Source Directories
      shell: bash
      run: |
        # Dereference symlinks so that this works on Windows.
        tar -h -c . | zstd -T0 -c > ../llvm-project.tar.zst
        mv ../llvm-project.tar.zst .
        tar -C ${{ steps.unpack.outputs.build-prefix }} -c build/ | zstd -T0 -c > build.tar.zst

    - name: Upload Stage 3 Source
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-stage3-source
        path: llvm-project.tar.zst
        retention-days: 2

    - name: Upload Stage 3 Build Dir
      uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 #v4.3.0
      with:
        name: ${{ runner.os }}-${{ runner.arch }}-stage3-build
        path: build.tar.zst
        retention-days: 2

  upload-release-binaries:
    name: "Upload Release Binaries"
    needs:
      - prepare
      - build-stage3
    if: >-
      always() &&
      ${{ needs.prepare.outputs.upload == 'true' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write # For release uploads

    steps:
    - name: 'Download artifact'
      uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
      with:
        pattern: '*-release-binary'

    - name: Upload Release
      shell: bash
      run: |
        sudo apt install python3-github
        ./llvm-project/llvm/utils/release/github-upload-release.py \
        --token ${{ github.token }} \
        --release ${{ needs.prepare.outputs.release-version }} \
        upload \
        --files *.tar.gz #${{ needs.build-stage3.outputs.release-filename }}


  test-stage3:
    name: "Test Stage 3"
    needs:
      - prepare
      - build-stage3
    if: always()
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
       runs-on:
         - ubuntu-22.04
         - windows-2022
         - macos-13
         - macos-14
    steps:
    - name: Install Ninja
      uses: llvm/actions/install-ninja@22e9f909d35b50bd1181709564bfe816eaeaae81 # main

    - name: 'Download artifact'
      uses: actions/download-artifact@6b208ae046db98c579e8a3aa621ab581ff575935 # v4.1.1
      with:
        pattern: ${{ runner.os }}-${{ runner.arch }}-stage3-*
        merge-multiple: true

    - name: Unpack Artifact
      shell: bash
      id: unpack
      run: |
        build_prefix=`pwd`
        if [ "${{ runner.os }}" = "Linux" ]; then
          sudo chown $USER:$USER /mnt/
          build_prefix=/mnt/
        fi
        tar --zstd -xf llvm-project.tar.zst
        rm llvm-project.tar.zst
        tar --zstd -C $build_prefix -xf build.tar.zst
        rm build.tar.zst
        echo "build-prefix=$build_prefix" >> $GITHUB_OUTPUT

    - name: Run Tests
      shell: bash
      run: |
        ninja -C ${{ steps.unpack.outputs.build-prefix }}/build stage2-check-all
